from __future__ import annotations
import numpy
import typing

__all__ = [
    'Buffer', 
    'Device'
]

class Buffer:
    def __init__(self: "Buffer", nrow: int, ncol: int, device: Device) -> None:
        ...
    def __getitem__(self: "Buffer", key: tuple[int, int]) -> float:
        ...
    def __setitem__(self: "Buffer", key: tuple[int, int], val: float) -> None:
        ...
    def buffer_size(self: "Buffer") -> int:
        ...
    def clear(self: "Buffer") -> None:
        ...
    def device(self: "Buffer") -> Device:
        ...
    def fill(self: "Buffer", val: float) -> None:
        ...
    def is_same_device(self: "Buffer", other: "Buffer") -> bool:
        ...
    def is_same_shape(self: "Buffer", other: "Buffer") -> bool:
        ...
    def ncol(self: "Buffer") -> int:
        ...
    def nrow(self: "Buffer") -> int:
        ...
    def num_elem(self: "Buffer") -> int:
        ...
    def shape(self: "Buffer") -> tuple[int, int]:
        ...
    def to(self: "Buffer", device: Device) -> None:
        ...
    def copy_to_numpy(self: "Buffer", out: numpy.ndarray[numpy.float64]) -> None:
        ...
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...

class Device:
    """
    Members:
      * CPU
      * GPU
    """
    CPU: typing.ClassVar[Device]  # value = <Device.CPU: 0>
    GPU: typing.ClassVar[Device]  # value = <Device.GPU: 1>
    __members__: typing.ClassVar[dict[str, Device]]  # value = {'CPU': <Device.CPU: 0>, 'GPU': <Device.GPU: 1>}

    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...